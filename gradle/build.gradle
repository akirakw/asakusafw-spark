/*
 * Copyright 2011-2015 Asakusa Framework Team.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
group = 'com.asakusafw.spark'
version = { f ->
    if (!f.exists()) {
        return null
    }
    def xml = new XmlSlurper().parse(f)
    return xml.version.text()
}(project.file('../pom.xml'))

defaultTasks 'clean', 'build', 'install'

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'eclipse'

configurations {
    deployerJars
}

repositories {
    mavenCentral()
    maven { url 'http://asakusafw.s3.amazonaws.com/maven/releases' }
}

dependencies {
    compile gradleApi()
    compile group: 'com.asakusafw', name: 'asakusa-gradle-plugins', version: '0.7.3'
    deployerJars 'org.springframework.build:aws-maven:5.0.0.RELEASE'
}

project.sourceCompatibility = JavaVersion.toVersion('1.7')
project.targetCompatibility = JavaVersion.toVersion('1.7')

tasks.withType(AbstractCompile) { task ->
    task.options.encoding = 'UTF-8'
    if (System.getProperty('compiler.bootclasspath') != null) {
        task.options.compilerArgs += ['-bootclasspath', System.getProperty('compiler.bootclasspath')]
    }
}

eclipse.classpath {
    file {
        whenMerged { classpath ->
            classpath.entries.findAll {
                it.path.contains('org.eclipse.jdt.launching.JRE_CONTAINER')
            }.each {
                it.path = "org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-${sourceCompatibility}"
            }
            classpath.entries.unique()
        }
    }
}

groovydoc {
    docTitle "Asakusa on Spark Gradle Plugins ${version}"
    windowTitle "Asakusa on Spark Gradle Plugins ${version}"
    footer "Copyright 2011-${new Date().format('yyyy')} Asakusa Framework Team."
}

processResources { t ->
    t.inputs.property 'version', String.valueOf(project.version)
    doLast {
        logger.info "injecting project version info: ${project.version}"
        File file = new File(t.destinationDir, 'META-INF/asakusa-spark-gradle/artifact.properties')
        if (!file.parentFile.exists()) {
            project.mkdir file.parentFile
        }

        Properties p = new Properties()
        p.put('compiler-version', String.valueOf(project.version))
        p.put('spark-compiler-version', String.valueOf(project.version))
        file.withOutputStream { s ->
            p.store(s, null)
        }
    }
}

task sourcesJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives tasks.sourcesJar
}

task wrapper(type: Wrapper) {
    gradleVersion '2.3'
    jarFile file('.buildtools/gradlew.jar')
}
